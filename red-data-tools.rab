= Red Data Tools

: subtitle
   楽しく実装すればいいじゃんねー
: author
   須藤功平
: institution
   株式会社クリアコード
: content-source
   沖縄Ruby会議02
: date
   2018-03-10
: start-time
   2018-03-10T13:00:00+09:00
: end-time
   2018-03-10T13:50:00+09:00
: theme
   clear-code

= Red Data Tools

プロジェクト

= 実現したいこと

Rubyで\n
データ処理

= やっていること

データ処理用の\n
ツールの開発

= 開発例

  * 各種フォーマットを扱うgem
    * Apache Arrow, Apache Parquet, CSV, ...
  * 各種パッケージの用意
    * deb, RPM, Homebrew, ...
  * ...

= この話の目的

勧誘\n
(('note:一緒に開発しようぜ！'))

= 勧誘方法

  * プロジェクトのポリシーを紹介
    * 一緒に活動したくなる！
  * 開発の具体例を紹介
    * 一緒に開発したくなる！

= ポリシー1

(('tag:center'))
(('tag:large'))
Rubyコミュニティーを\n
超えて協力する\n
(('note:もちろんRubyコミュニティーとも協力する'))

== スライドプロパティー

: as-large-as-possible
   false

= Rubyに閉じずに協力

  * 他の言語は敵ではない
    * 他の言語がよくなることは\n
      Rubyがなにかを失うことではない
  * みんなよくなったらいいじゃん
    * Rubyも他の言語も

= 協力例\n(('note:Apache Arrow'))

  * Pythonの人達他と一緒にC/C++のライブラリーを開発
    * それぞれでバインディングを開発
    * それぞれで同じライブラリーを活用

= ポリシー2

(('tag:center'))
(('tag:large'))
非難することよりも\n
手を動かすことが大事

== スライドプロパティー

: as-large-as-possible
   false

= 非難しない

そんなことを\n
している\n
時間はない

= 手を動かす

  * これ、よくないなー
    * よくすればいいじゃんねー
  * これがないからなー
    * 作ればいいじゃんねー

= ポリシー3

(('tag:center'))
(('tag:large'))
一回だけの活発な活動より\n
小さくても\n
継続的に活動することが\n
大事

== スライドプロパティー

: as-large-as-possible
   false

= 一回だけの活発な活動

  * ○○作ったよ！どーん！
    * すごい！
    * (('note:…数年後…'))今動かないんだよね…

= 継続的な活動

  * ちまちま○○作ってるんだー！
    * がんばってね！今後に期待！
    * (('note:…数年後…'))これは…使える！

= 継続的な活動のために

  * がんばり過ぎない
    * 短距離走ではなくマラソン
    * 途中で休んだっていい
  * 1人で抱え込まない
    * みんなでやれば途中で休みやすい

= ポリシー4

(('tag:center'))
(('tag:large'))
現時点での知識不足は\n
問題ではない

== スライドプロパティー

: as-large-as-possible
   false

= 知識不足？

  * 高速な実装の実現
    * プログラミング・数学などの\n
      高度な知識は便利
  * 今すごい人でも\n
    最初はなにも知らなかった
    * 「今知らないこと」は\n
      「始めない理由」にはならない

= 私たちは学べる

  * 知識は身につく
    * 活動していく中で自然と
  * 学び方
    * OSSの既存実装から学習
    * ドキュメントを読む
    * 他の人から教えてもらう

= ポリシー5

(('tag:center'))
(('tag:large'))
部外者からの非難は\n
気にしない

== スライドプロパティー

: as-large-as-possible
   false

= 部外者からの非難

  * Rubyで頑張ってもアレだよねー\n
    とか
    * 無視する
  * 対応している時間はない

= ポリシー6

楽しくやろう！

= 楽しむ

使っているのは\n
Rubyだから！

= ポリシー

  * Ruby外とも協力
  * 非難するより手を動かす
  * 継続的な活動
  * 知識不足は問題ない
  * 外からの非難は気にしない
  * 楽しくやろう！

= 開発例

  * ツールの紹介((*ではない*))
  * 実装の紹介
    * 開発中に((*おっ*))と思ったやつとか
    * 紹介したいやつとか

= 開発例1

csv

= csv

  * CSVの読み書きライブラリー
  * 2003年から標準添付
  * 2018年からメンテナンスを引取

= digを追加したとき

(('tag:x-small'))((<URL:https://github.com/ruby/csv/pull/15>))

  * (({CSV::Table#dig}))
  * (({CSV::Row#dig}))

= digの作り方

  # rouge ruby

  def dig(index, *indexes)
    # ここだけ違う
    value = find_value(index)
    # ↓は共通
    return nil if value.nil?
    return value if indexes.empty?
    value.dig(*indexes)
  end

= CSV::Rowでのfind_value

  # rouge ruby

  row[index] # => field value

(({dig}))の中では(({self}))の(({[]}))を呼べばよい

= []の呼び方

  # rouge ruby

  def dig(index, *indexes)
    # インスタンスメソッドでは
    # selfを省略できるからこう？
    value = [index]
    # ↑は配列リテラル
    # ...
  end

= []の呼び方

  # rouge ruby

  def dig(index, *indexes)
    # こういうときこそsendで　　
    # メソッド呼び出し
    value = send(:[], index)
    # 動く
    # ...
  end

= []の呼び方

  # rouge ruby

  def dig(index, *indexes)
    # row[index]みたいに書けば　
    # よかった
    value = self[index]
    # もちろん動く
    # ...
  end

= selfの[]の呼び方

  * 自分も昔悩んだ気がする
  * 懐かしかったので紹介
  * みんなで開発→気づきやすい

= 開発例2

Red Datasets

= Red Datasets

  * データを簡単に使えるように！
  * 勉強・実験時とかに便利

= 例：日本語データ欲しい！

  # rouge ruby
  require "datasets"
  # 日本語版Wikipediaの記事データ
  options = {language: :ja, type: :articles}
  dataset = Datasets::Wikipedia.new(options)
  dataset.each do |page| # 全ページを順に処理
    p page.title         # タイトル
    p page.revision.text # 本文
  end

(('tag:center'))
(('note:インターフェイスがeachなのがカッコいいんだよ！'))

= 実装方法

  (1) データのダウンロード
  (2) データのパース
  (3) 順に(({yield}))

= ダウンロード

  # rouge ruby
  require "open-uri"
  open("https://...") do |input|
    File.open("...", "wb") do |output|
      IO.copy_stream(input, output)
    end
  end

= 途中でエラーになったら？

(('tag:center'))
(('tag:x-large'))
やり直し

(('tag:center'))
または

(('tag:center'))
(('tag:x-large'))
再開

= 再開

HTTP\n
range request

= HTTP range request

  * リクエスト
    * (({Range: bytes=#{start}-}))
  * レスポンス
    * (({206 Partial Content}))
    * (({Content-Range: bytes ...}))

= open-uriとrange request

  * open-uriはrange request未対応
    * 出力無関係のAPIだからしょうがない
  * どうなるのがいいだろう？
    * 今度田中さんに相談しよう
    * Red Data ToolsはRubyもよくしたい\n
      (('note:ポリシー1：コミュニティーを超えて協力'))

= open-uriでrange request

  # rouge ruby
  # 文字列キーはHTTPヘッダーになる
  options = {"Range" => "bytes=#{start}-"}
  open("...", options) do |input|
    # レスポンスが200か206かはわからない
    File.open("...", "ab") do |output|
      IO.copy_stream(input, output)
    end
  end

= 大きなデータの扱い

  * 時間がかかる
  * あとどのくらいか気になる
    * ちゃんと動いているよね…？

= プログレスバー

  * ユーザーを安心させるUI
  * 可視化
    * 動いている？
    * どのくらいで終わりそう？

= プログレスバーの実装

  # rouge ruby

  n = 40
  1.upto(n) do |i|
    print("\r|%-*s|" % [n, "*" * i])
    sleep 0.1
  end
  puts

= sprintfフォーマット

(('tag:center'))
(({%-*s}))

  * (({%}))：フォーマット開始
  * (({-}))：左詰め
  * (({*}))：引数で幅を指定
  * (({s}))：対象は文字列

= sprintfフォーマット

(('tag:center'))
(({"%-*s" % [n - 1, "*" * i]}))

  * 幅は(({n - 1}))桁
  * (({"*" * i}))を左詰め

= open-uriでプログレスバー

  # rouge ruby

  length = nil
  progress = lambda do |current|
    ratio = current / length.to_f
    print("\r|%-10s|" % ["*" * (ratio * 10).ceil])
  end
  open(uri,
       content_length_proc: ->(l) {length = l},
       progress_proc: progress) do |input|
    # ...
  end
  puts

= もっとプログレスバー

  * バックグランド化したら？
    * 表示して欲しくない\n
      (('note:ヒント：プロセスグループ'))
  * リダイレクトしているときは？
    * 表示して欲しくない\n
      (('note:ヒント：IO#tty?'))
  * プログレスバーの表示幅は？\n
    (('note:ヒント：io/console/size'))

= 開発例3

Apache Arrow\n
Red Arrow

= Apache Arrow

  * インメモリーデータ分析用\n
    データフォーマット\n
    (('note:ほぼ固まってきた'))
  * インメモリーデータ分析用\n
    高速なデータ操作実装\n
    (('note:徐々に実装が始まっている'))
  * 今、すごくアツい！

= Apache Arrowの特徴

(('tag:center'))
(('tag:large'))
データ交換コストが低い

== スライドプロパティー

: as-large-as-possible
   false

= 低データ交換コスト

  * 複数システムで協力しやすい
    * Rubyでデータ取得→
    * Pythonに渡して分析
  * 徐々にRubyの適用可能範囲を\n
    増やせる

= Apache Arrowの利用例

  * Scala🔁Python
    * (('tag:x-small'))Apache Spark
  * CPU🔁GPU
    * (('tag:x-small'))((<URL:https://github.com/gpuopenanalytics/libgdf>))
  * CPU🔁FPGA
    * (('tag:x-small'))((<URL:https://github.com/johanpel/fletcher>))

= Apache ArrowをRubyでも！

  * バインディングを本体で開発
    * 本体の開発チーム入り\n
    * GObject Introspection(GI)を利用
  * GIを使うとRuby以外のバインディングも自動生成できる\n
    (('note:ポリシー1：コミュニティーを超えて協力'))

= Red Arrow

  * Apache Arrowの\n
    Rubyバインディング
  * GIベースのバインディングに\n
    Ruby特有の機能をプラス

= Ruby特有の機能1

スライスAPI

= スライス

(('tag:center'))
データの一部を切り出す

  # rouge ruby

  (0..10).to_a.slice(2)
  # => 2
  (0..10).to_a.slice(2..4)
  # => [2, 3, 4]
  (0..10).to_a.slice(2, 4)
  # => [2, 3, 4, 5]

= Red Arrowのスライス

  # rouge ruby

  table.slice(2)
  # 2行目だけのテーブル
  # Array#sliceと違う

= Red Arrowのスライス

  # rouge ruby

  table.slice(2..4)
  # 2,3,4行目だけのテーブル
  # Array#sliceと同じ

= Red Arrowのスライス

  # rouge ruby

  table.slice(2, 4)
  # 2,4行目だけのテーブル
  # Array#sliceと違う
  table.slice(2, 4, 6, 8)
  # 2,4,6,8行目だけのテーブル
  # Array#sliceと違う

= Red Arrowのスライス

  # rouge ruby

  table.slice([2, 4])
  # 2,3,4,5行目だけのテーブル
  # Array#slice(2, 4)と同じ

= Red Arrowのスライス

  # rouge ruby

  table.slice([true, false] * 5)
  # 奇数行だけのテーブル

= Red Arrowのスライス

  # rouge ruby

  table.slice do |slicer|
    slicer.price >= 500
  end
  # priceカラムの値が500以上の
  # 行だけのテーブル

= Red Arrowのスライス

  # rouge ruby

  table.slice do |slicer|
    (slicer.price >= 500) &
      (slicer.is_published)
  end
  # priceカラムの値が500以上かつ
  # is_publishedカラムの値がtrueの
  # 行だけのテーブル

= Red Arrowのスライス

Active Recordみたいなfluent intefaceよりもブロック内で式を書く方がRubyっぽいんじゃないかと思うんだよねー\n
fluent interfaceはORを書きにくいからさー

(('tag:xx-small'))
Fluent interface:\n
((<URL:http://bliki-ja.github.io/FluentInterface/>))

= Red Arrowと外の世界

  * いろんなデータ・ライブラリーのハブにしたい
  * TODO

= 開発したくなった？

  * 楽しそう！
    * 一緒に開発しようぜ！
  * やっぱRubyでデータ扱いたい！
    * 一緒に開発しようぜ！
  * レベルアップしたい！
    * 一緒に開発しようぜ！

= レベルアップへの道

  * 🙅NG集をたくさん覚える
  * 🙆よいコードにたくさん触れる

= よいコード

Red Data Toolsに\n
たくさんある！

= 一緒に開発

  * 🌏どこからでもオンラインで
    * GitHubとGitter（チャット）を使用
  * ➕東京は月一オフラインで
    * 🔍「OSS Gate Red Data Tools」

= Join Red Data Tools!

  * Webサイト
    * (('tag:x-small'))((<URL:https://red-data-tools.github.io/ja/>))
  * Gitter（チャット）
    * (('tag:x-small'))((<URL:https://gitter.im/red-data-tools/ja>))
  * GitHub
    * (('tag:x-small'))((<URL:https://github.com/red-data-tools/>))
